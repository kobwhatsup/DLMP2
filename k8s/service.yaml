# DLMP Kubernetes服务配置
# 提供服务发现和负载均衡

apiVersion: v1
kind: Service
metadata:
  name: dlmp-backend
  namespace: dlmp-production
  labels:
    app: dlmp-backend
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: management
      port: 8081
      targetPort: 8081
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 8080
      protocol: TCP
  selector:
    app: dlmp-backend
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: dlmp-frontend
  namespace: dlmp-production
  labels:
    app: dlmp-frontend
    environment: production
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: dlmp-frontend
  sessionAffinity: None

---
# 用于外部访问的LoadBalancer服务
apiVersion: v1
kind: Service
metadata:
  name: dlmp-external
  namespace: dlmp-production
  labels:
    app: dlmp
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:region:account:certificate/certificate-id
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 80
      protocol: TCP
  selector:
    app: dlmp-frontend
  loadBalancerSourceRanges:
    - 0.0.0.0/0

---
# Headless服务用于StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: dlmp-backend-headless
  namespace: dlmp-production
  labels:
    app: dlmp-backend
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: dlmp-backend

---
# MySQL服务
apiVersion: v1
kind: Service
metadata:
  name: mysql-master
  namespace: dlmp-production
  labels:
    app: mysql
    role: master
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
      protocol: TCP
  selector:
    app: mysql
    role: master

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-slave
  namespace: dlmp-production
  labels:
    app: mysql
    role: slave
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
      protocol: TCP
  selector:
    app: mysql
    role: slave

---
# Redis集群服务
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: dlmp-production
  labels:
    app: redis
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
    - name: redis-cluster
      port: 16379
      targetPort: 16379
      protocol: TCP
  selector:
    app: redis

---
# Redis集群访问服务
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: dlmp-production
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  selector:
    app: redis

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dlmp-ingress
  namespace: dlmp-production
  labels:
    app: dlmp
    environment: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
spec:
  tls:
    - hosts:
        - dlmp.example.com
        - www.dlmp.example.com
        - admin.dlmp.example.com
      secretName: dlmp-tls-secret
  rules:
    # 主站点
    - host: dlmp.example.com
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: dlmp-backend
                port:
                  number: 8080
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dlmp-frontend
                port:
                  number: 80
    
    # www重定向
    - host: www.dlmp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dlmp-frontend
                port:
                  number: 80
    
    # 管理后台
    - host: admin.dlmp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dlmp-frontend
                port:
                  number: 80

---
# 内部Ingress（仅集群内部访问）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dlmp-internal-ingress
  namespace: dlmp-production
  labels:
    app: dlmp
    environment: production
    access: internal
  annotations:
    kubernetes.io/ingress.class: nginx-internal
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "DLMP Internal Access"
spec:
  tls:
    - hosts:
        - internal.dlmp.example.com
      secretName: dlmp-internal-tls
  rules:
    - host: internal.dlmp.example.com
      http:
        paths:
          # 管理端点
          - path: /actuator
            pathType: Prefix
            backend:
              service:
                name: dlmp-backend
                port:
                  number: 8081
          # 监控端点
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: dlmp-backend
                port:
                  number: 9090

---
# 监控服务Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dlmp-monitoring-ingress
  namespace: dlmp-monitoring
  labels:
    app: monitoring
    environment: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - monitoring.dlmp.example.com
      secretName: monitoring-tls-secret
  rules:
    - host: monitoring.dlmp.example.com
      http:
        paths:
          # Grafana
          - path: /grafana
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
          # Prometheus
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: prometheus
                port:
                  number: 9090
          # AlertManager
          - path: /alertmanager
            pathType: Prefix
            backend:
              service:
                name: alertmanager
                port:
                  number: 9093
          # Kibana
          - path: /kibana
            pathType: Prefix
            backend:
              service:
                name: kibana
                port:
                  number: 5601
          # Jaeger
          - path: /jaeger
            pathType: Prefix
            backend:
              service:
                name: jaeger
                port:
                  number: 16686

---
# 服务监视器 (Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dlmp-backend-monitor
  namespace: dlmp-production
  labels:
    app: dlmp-backend
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: dlmp-backend
  endpoints:
    - port: metrics
      path: /actuator/prometheus
      interval: 30s
      scrapeTimeout: 10s

---
# Pod监视器
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: dlmp-pod-monitor
  namespace: dlmp-production
  labels:
    app: dlmp
spec:
  selector:
    matchLabels:
      app: dlmp-backend
  podMetricsEndpoints:
    - port: metrics
      path: /actuator/prometheus
      interval: 30s