name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # ÁâàÊú¨È™åËØÅ
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            IS_PRERELEASE="false"
          fi
          
          # È™åËØÅÁâàÊú¨Ê†ºÂºè
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "‚úÖ Version validated: $VERSION"

      - name: Check if tag exists
        run: |
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "‚ùå Tag ${{ steps.version.outputs.version }} already exists"
              exit 1
            fi
          fi

  # ÁîüÊàêÂèòÊõ¥Êó•Âøó
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-version
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -z "$PREVIOUS_TAG" ]]; then
            echo "üìù First release - generating full changelog"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "üìù Generating changelog from $PREVIOUS_TAG to ${{ needs.validate-version.outputs.version }}"
            COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # ÂàÜÁ±ªÊèê‰∫§
          FEATURES=$(echo "$COMMITS" | grep -E "^- (feat|feature)" || true)
          FIXES=$(echo "$COMMITS" | grep -E "^- (fix|bugfix)" || true)
          IMPROVEMENTS=$(echo "$COMMITS" | grep -E "^- (perf|improve|enhance)" || true)
          OTHERS=$(echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|perf|improve|enhance)" || true)
          
          # ÊûÑÂª∫ÂèòÊõ¥Êó•Âøó
          CHANGELOG="## üöÄ Release ${{ needs.validate-version.outputs.version }}\n\n"
          
          if [[ -n "$FEATURES" ]]; then
            CHANGELOG+="### ‚ú® New Features\n$FEATURES\n\n"
          fi
          
          if [[ -n "$FIXES" ]]; then
            CHANGELOG+="### üêõ Bug Fixes\n$FIXES\n\n"
          fi
          
          if [[ -n "$IMPROVEMENTS" ]]; then
            CHANGELOG+="### ‚ö° Improvements\n$IMPROVEMENTS\n\n"
          fi
          
          if [[ -n "$OTHERS" ]]; then
            CHANGELOG+="### üìù Other Changes\n$OTHERS\n\n"
          fi
          
          # ËΩ¨‰πâÊç¢Ë°åÁ¨¶Áî®‰∫éGitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

  # ÊûÑÂª∫ÂèëÂ∏ÉÂåÖ
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-version
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Setup Java (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle

      - name: Build Frontend
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          
          # ÂàõÂª∫ÂèëÂ∏ÉÂåÖ
          cd dist
          tar -czf ../dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz .
          cd ..
          
          # ÁîüÊàêÊ†°È™åÂíå
          sha256sum dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz > dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz.sha256

      - name: Build Backend
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          chmod +x gradlew
          ./gradlew build -x test
          
          # ÈáçÂëΩÂêçJARÊñá‰ª∂
          cp build/libs/*.jar dlmp-backend-${{ needs.validate-version.outputs.version }}.jar
          
          # ÁîüÊàêÊ†°È™åÂíå
          sha256sum dlmp-backend-${{ needs.validate-version.outputs.version }}.jar > dlmp-backend-${{ needs.validate-version.outputs.version }}.jar.sha256

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-release
          path: |
            ${{ matrix.component == 'frontend' && 'frontend/dlmp-frontend-*' || 'backend/dlmp-backend-*' }}
          retention-days: 30

  # ÊûÑÂª∫ÂíåÊé®ÈÄÅDockerÈïúÂÉè
  build-docker-release:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: [validate-version, build-release]
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.component }}-release
          path: ${{ matrix.component }}/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version info
        id: version-info
        run: |
          VERSION=${{ needs.validate-version.outputs.version }}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f1,2)
          
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "full=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.CONTAINER_REGISTRY }}/dlmp-${{ matrix.component }}:${{ steps.version-info.outputs.full }}
            ${{ secrets.CONTAINER_REGISTRY }}/dlmp-${{ matrix.component }}:${{ steps.version-info.outputs.minor }}
            ${{ secrets.CONTAINER_REGISTRY }}/dlmp-${{ matrix.component }}:${{ steps.version-info.outputs.major }}
            ${{ secrets.CONTAINER_REGISTRY }}/dlmp-${{ matrix.component }}:latest
            dlmp/dlmp-${{ matrix.component }}:${{ steps.version-info.outputs.full }}
            dlmp/dlmp-${{ matrix.component }}:${{ steps.version-info.outputs.minor }}
            dlmp/dlmp-${{ matrix.component }}:${{ steps.version-info.outputs.major }}
            dlmp/dlmp-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ÂÆâÂÖ®Êâ´Êèè
  security-scan:
    name: Security Scan for Release
    runs-on: ubuntu-latest
    needs: [validate-version, build-docker-release]
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.CONTAINER_REGISTRY }}/dlmp-${{ matrix.component }}:${{ needs.validate-version.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.CONTAINER_REGISTRY }}/dlmp-${{ matrix.component }}:${{ needs.validate-version.outputs.version }}'
          format: 'json'
          output: 'trivy-results-${{ matrix.component }}.json'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # ÂàõÂª∫GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, generate-changelog, build-release, build-docker-release, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all release artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts/

      - name: Create tag (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ needs.validate-version.outputs.version }}
          git push origin ${{ needs.validate-version.outputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          release_name: 'DLMP ${{ needs.validate-version.outputs.version }}'
          body: |
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ## üì¶ Assets
            
            ### Docker Images
            ```bash
            docker pull dlmp/dlmp-frontend:${{ needs.validate-version.outputs.version }}
            docker pull dlmp/dlmp-backend:${{ needs.validate-version.outputs.version }}
            ```
            
            ### Installation
            ```bash
            # Download and extract frontend
            wget https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.version }}/dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz
            tar -xzf dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz
            
            # Download backend JAR
            wget https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.version }}/dlmp-backend-${{ needs.validate-version.outputs.version }}.jar
            ```
            
            ### Verification
            ```bash
            # Verify checksums
            sha256sum -c dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz.sha256
            sha256sum -c dlmp-backend-${{ needs.validate-version.outputs.version }}.jar.sha256
            ```
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/....${{ needs.validate-version.outputs.version }}
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ needs.validate-version.outputs.is_prerelease == 'true' }}

      - name: Upload Frontend Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/frontend-release/dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz
          asset_name: dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Frontend Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/frontend-release/dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz.sha256
          asset_name: dlmp-frontend-${{ needs.validate-version.outputs.version }}.tar.gz.sha256
          asset_content_type: text/plain

      - name: Upload Backend Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/backend-release/dlmp-backend-${{ needs.validate-version.outputs.version }}.jar
          asset_name: dlmp-backend-${{ needs.validate-version.outputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Upload Backend Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/backend-release/dlmp-backend-${{ needs.validate-version.outputs.version }}.jar.sha256
          asset_name: dlmp-backend-${{ needs.validate-version.outputs.version }}.jar.sha256
          asset_content_type: text/plain

  # ÈÉ®ÁΩ≤Âà∞Áîü‰∫ßÁéØÂ¢É
  deploy-production:
    name: Deploy to Production
    uses: ./.github/workflows/cd.yml
    needs: [validate-version, create-release]
    if: needs.validate-version.outputs.is_prerelease == 'false'
    with:
      environment: production
      force_deploy: false
    secrets: inherit

  # ÂèëÂ∏ÉÈÄöÁü•
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-version, create-release, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.create-release.result == 'success' && 'success' || 'failure' }}
          channel: '#releases'
          message: |
            üöÄ **Release ${{ needs.validate-version.outputs.version }}** 
            
            Status: ${{ needs.create-release.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            Pre-release: ${{ needs.validate-version.outputs.is_prerelease }}
            
            üîó [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.version }})
            üê≥ [Docker Images](https://hub.docker.com/r/dlmp)
            
            ${{ needs.deploy-production.result == 'success' && 'üåü Successfully deployed to production!' || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update documentation
        if: needs.create-release.result == 'success'
        run: |
          # Ëß¶ÂèëÊñáÊ°£ÁΩëÁ´ôÊõ¥Êñ∞
          curl -X POST "${{ secrets.DOCS_WEBHOOK_URL }}" \
            -H "Authorization: token ${{ secrets.DOCS_TOKEN }}" \
            -d '{"ref":"main","inputs":{"version":"${{ needs.validate-version.outputs.version }}"}}'