# HAProxy配置文件
# 高可用负载均衡器配置

global
    daemon
    user haproxy
    group haproxy
    
    # 性能配置
    maxconn 4096
    nbproc 2
    nbthread 4
    
    # 日志配置
    log stdout local0
    log-tag haproxy
    
    # SSL配置
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-sslv3 no-tls-tickets
    
    # 统计信息
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    option tcplog
    
    # 超时配置
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # 错误处理
    retries 3
    option abortonclose
    
    # 健康检查
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    
    # 压缩
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

# 统计页面
listen stats
    bind :8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats realm HAProxy\ Statistics
    stats auth admin:admin123
    stats admin if TRUE

# 前端HTTP（重定向到HTTPS）
frontend http_frontend
    bind :80
    
    # 健康检查路径
    acl health_check path /health
    http-request return status 200 content-type text/plain string "healthy" if health_check
    
    # Let's Encrypt验证路径
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl
    
    # 重定向到HTTPS
    redirect scheme https if !{ ssl_fc }

# 前端HTTPS
frontend https_frontend
    bind :443 ssl crt /etc/ssl/certs/dlmp.pem
    
    # 安全头
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # 路由规则
    acl is_api path_beg /api/
    acl is_ws path_beg /ws/
    acl is_admin hdr(host) -i admin.dlmp.example.com
    acl is_monitor hdr(host) -i monitor.dlmp.example.com
    
    # 限流配置
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # 后端选择
    use_backend api_backend if is_api
    use_backend websocket_backend if is_ws
    use_backend admin_backend if is_admin
    use_backend monitoring_backend if is_monitor
    default_backend web_backend

# 后端服务器组
backend web_backend
    description "Frontend Web Servers"
    balance roundrobin
    
    # 健康检查
    option httpchk GET /health HTTP/1.1\r\nHost:\ dlmp.example.com
    
    # 服务器列表
    server web1 dlmp-frontend-1:3000 check weight 1 maxconn 1000
    server web2 dlmp-frontend-2:3000 check weight 1 maxconn 1000
    server web3 dlmp-frontend-3:3000 check weight 1 maxconn 1000 backup

backend api_backend
    description "Backend API Servers"
    balance leastconn
    
    # 健康检查
    option httpchk GET /actuator/health HTTP/1.1\r\nHost:\ dlmp.example.com
    
    # 会话保持（如果需要）
    # cookie SERVERID insert indirect nocache
    
    # 服务器列表
    server api1 dlmp-backend-1:8080 check weight 1 maxconn 500
    server api2 dlmp-backend-2:8080 check weight 1 maxconn 500
    server api3 dlmp-backend-3:8080 check weight 1 maxconn 500
    server api4 dlmp-backend-4:8080 check weight 1 maxconn 500 backup

backend websocket_backend
    description "WebSocket Servers"
    balance source
    
    # WebSocket配置
    option http-server-close
    option forceclose
    no option httpclose
    
    # 服务器列表
    server ws1 dlmp-backend-1:8080 check weight 1
    server ws2 dlmp-backend-2:8080 check weight 1
    server ws3 dlmp-backend-3:8080 check weight 1

backend admin_backend
    description "Admin Interface"
    balance roundrobin
    
    # IP白名单
    acl allowed_ips src 192.168.1.0/24 10.0.0.0/8 172.16.0.0/12
    http-request deny unless allowed_ips
    
    # 服务器列表
    server admin1 dlmp-admin-1:3000 check weight 1
    server admin2 dlmp-admin-2:3000 check weight 1 backup

backend monitoring_backend
    description "Monitoring Services"
    balance roundrobin
    
    # IP白名单
    acl allowed_ips src 192.168.1.0/24 10.0.0.0/8 172.16.0.0/12
    http-request deny unless allowed_ips
    
    # 路径路由
    acl is_prometheus path_beg /prometheus/
    acl is_grafana path_beg /grafana/
    acl is_redis path_beg /redis/
    
    # 服务器选择
    use-server prometheus if is_prometheus
    use-server grafana if is_grafana
    use-server redis-commander if is_redis
    
    server prometheus prometheus:9090 check
    server grafana grafana:3000 check
    server redis-commander redis-commander:8081 check

backend letsencrypt-backend
    description "Let's Encrypt Challenge"
    server letsencrypt 127.0.0.1:8080 check

# 邮件代理（如果需要）
listen smtp_proxy
    bind :25
    mode tcp
    balance leastconn
    
    server smtp1 smtp-server-1:25 check
    server smtp2 smtp-server-2:25 check backup

# 数据库代理（如果需要）
listen mysql_proxy
    bind :3306
    mode tcp
    balance leastconn
    
    # MySQL健康检查
    option mysql-check user haproxy
    
    server mysql1 mysql-master:3306 check weight 1
    server mysql2 mysql-slave-1:3306 check weight 1 backup
    server mysql3 mysql-slave-2:3306 check weight 1 backup

# Redis代理（如果需要）
listen redis_proxy
    bind :6379
    mode tcp
    balance first
    
    server redis1 redis-node-1:6379 check
    server redis2 redis-node-2:6379 check backup
    server redis3 redis-node-3:6379 check backup